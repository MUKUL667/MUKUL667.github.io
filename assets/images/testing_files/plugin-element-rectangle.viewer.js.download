(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var objectPath = {exports: {}};

	(function (module) {
		(function (root, factory) {

		  /*istanbul ignore next:cant test*/
		  {
		    module.exports = factory();
		  }
		})(commonjsGlobal, function () {

		  var toStr = Object.prototype.toString;

		  function hasOwnProperty (obj, prop) {
		    if (obj == null) {
		      return false
		    }
		    //to handle objects with null prototypes (too edge case?)
		    return Object.prototype.hasOwnProperty.call(obj, prop)
		  }

		  function isEmpty (value) {
		    if (!value) {
		      return true
		    }
		    if (isArray(value) && value.length === 0) {
		      return true
		    } else if (typeof value !== 'string') {
		      for (var i in value) {
		        if (hasOwnProperty(value, i)) {
		          return false
		        }
		      }
		      return true
		    }
		    return false
		  }

		  function toString (type) {
		    return toStr.call(type)
		  }

		  function isObject (obj) {
		    return typeof obj === 'object' && toString(obj) === '[object Object]'
		  }

		  var isArray = Array.isArray || function (obj) {
		    /*istanbul ignore next:cant test*/
		    return toStr.call(obj) === '[object Array]'
		  };

		  function isBoolean (obj) {
		    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]'
		  }

		  function getKey (key) {
		    var intKey = parseInt(key);
		    if (intKey.toString() === key) {
		      return intKey
		    }
		    return key
		  }

		  function factory (options) {
		    options = options || {};

		    var objectPath = function (obj) {
		      return Object.keys(objectPath).reduce(function (proxy, prop) {
		        if (prop === 'create') {
		          return proxy
		        }

		        /*istanbul ignore else*/
		        if (typeof objectPath[prop] === 'function') {
		          proxy[prop] = objectPath[prop].bind(objectPath, obj);
		        }

		        return proxy
		      }, {})
		    };

		    var hasShallowProperty;
		    if (options.includeInheritedProps) {
		      hasShallowProperty = function () {
		        return true
		      };
		    } else {
		      hasShallowProperty = function (obj, prop) {
		        return (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop)
		      };
		    }

		    function getShallowProperty (obj, prop) {
		      if (hasShallowProperty(obj, prop)) {
		        return obj[prop]
		      }
		    }

		    var getShallowPropertySafely;
		    if (options.includeInheritedProps) {
		      getShallowPropertySafely = function (obj, currentPath) {
		        if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {
		          currentPath = String(currentPath);
		        }
		        var currentValue = getShallowProperty(obj, currentPath);
		        if (currentPath === '__proto__' || currentPath === 'prototype' ||
		          (currentPath === 'constructor' && typeof currentValue === 'function')) {
		          throw new Error('For security reasons, object\'s magic properties cannot be set')
		        }
		        return currentValue
		      };
		    } else {
		      getShallowPropertySafely = function (obj, currentPath) {
		        return getShallowProperty(obj, currentPath)
		      };
		    }

		    function set (obj, path, value, doNotReplace) {
		      if (typeof path === 'number') {
		        path = [path];
		      }
		      if (!path || path.length === 0) {
		        return obj
		      }
		      if (typeof path === 'string') {
		        return set(obj, path.split('.').map(getKey), value, doNotReplace)
		      }
		      var currentPath = path[0];
		      var currentValue = getShallowPropertySafely(obj, currentPath);
		      if (path.length === 1) {
		        if (currentValue === void 0 || !doNotReplace) {
		          obj[currentPath] = value;
		        }
		        return currentValue
		      }

		      if (currentValue === void 0) {
		        //check if we assume an array
		        if (typeof path[1] === 'number') {
		          obj[currentPath] = [];
		        } else {
		          obj[currentPath] = {};
		        }
		      }

		      return set(obj[currentPath], path.slice(1), value, doNotReplace)
		    }

		    objectPath.has = function (obj, path) {
		      if (typeof path === 'number') {
		        path = [path];
		      } else if (typeof path === 'string') {
		        path = path.split('.');
		      }

		      if (!path || path.length === 0) {
		        return !!obj
		      }

		      for (var i = 0; i < path.length; i++) {
		        var j = getKey(path[i]);

		        if ((typeof j === 'number' && isArray(obj) && j < obj.length) ||
		          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
		          obj = obj[j];
		        } else {
		          return false
		        }
		      }

		      return true
		    };

		    objectPath.ensureExists = function (obj, path, value) {
		      return set(obj, path, value, true)
		    };

		    objectPath.set = function (obj, path, value, doNotReplace) {
		      return set(obj, path, value, doNotReplace)
		    };

		    objectPath.insert = function (obj, path, value, at) {
		      var arr = objectPath.get(obj, path);
		      at = ~~at;
		      if (!isArray(arr)) {
		        arr = [];
		        objectPath.set(obj, path, arr);
		      }
		      arr.splice(at, 0, value);
		    };

		    objectPath.empty = function (obj, path) {
		      if (isEmpty(path)) {
		        return void 0
		      }
		      if (obj == null) {
		        return void 0
		      }

		      var value, i;
		      if (!(value = objectPath.get(obj, path))) {
		        return void 0
		      }

		      if (typeof value === 'string') {
		        return objectPath.set(obj, path, '')
		      } else if (isBoolean(value)) {
		        return objectPath.set(obj, path, false)
		      } else if (typeof value === 'number') {
		        return objectPath.set(obj, path, 0)
		      } else if (isArray(value)) {
		        value.length = 0;
		      } else if (isObject(value)) {
		        for (i in value) {
		          if (hasShallowProperty(value, i)) {
		            delete value[i];
		          }
		        }
		      } else {
		        return objectPath.set(obj, path, null)
		      }
		    };

		    objectPath.push = function (obj, path /*, values */) {
		      var arr = objectPath.get(obj, path);
		      if (!isArray(arr)) {
		        arr = [];
		        objectPath.set(obj, path, arr);
		      }

		      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
		    };

		    objectPath.coalesce = function (obj, paths, defaultValue) {
		      var value;

		      for (var i = 0, len = paths.length; i < len; i++) {
		        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
		          return value
		        }
		      }

		      return defaultValue
		    };

		    objectPath.get = function (obj, path, defaultValue) {
		      if (typeof path === 'number') {
		        path = [path];
		      }
		      if (!path || path.length === 0) {
		        return obj
		      }
		      if (obj == null) {
		        return defaultValue
		      }
		      if (typeof path === 'string') {
		        return objectPath.get(obj, path.split('.'), defaultValue)
		      }

		      var currentPath = getKey(path[0]);
		      var nextObj = getShallowPropertySafely(obj, currentPath);
		      if (nextObj === void 0) {
		        return defaultValue
		      }

		      if (path.length === 1) {
		        return nextObj
		      }

		      return objectPath.get(obj[currentPath], path.slice(1), defaultValue)
		    };

		    objectPath.del = function del (obj, path) {
		      if (typeof path === 'number') {
		        path = [path];
		      }

		      if (obj == null) {
		        return obj
		      }

		      if (isEmpty(path)) {
		        return obj
		      }
		      if (typeof path === 'string') {
		        return objectPath.del(obj, path.split('.'))
		      }

		      var currentPath = getKey(path[0]);
		      getShallowPropertySafely(obj, currentPath);
		      if (!hasShallowProperty(obj, currentPath)) {
		        return obj
		      }

		      if (path.length === 1) {
		        if (isArray(obj)) {
		          obj.splice(currentPath, 1);
		        } else {
		          delete obj[currentPath];
		        }
		      } else {
		        return objectPath.del(obj[currentPath], path.slice(1))
		      }

		      return obj
		    };

		    return objectPath
		  }

		  var mod = factory();
		  mod.create = factory;
		  mod.withInheritedProps = factory({includeInheritedProps: true});
		  return mod
		});
	} (objectPath));

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}
	function isElementPlugin(plugin) {
	    if (plugin.type === "ElementPlugin")
	        return true;
	    return false;
	}
	function isAureliaElementPlugin(plugin) {
	    if (isElementPlugin(plugin) && plugin.kind === "AureliaComponent")
	        return true;
	    return false;
	}
	function registerElementPlugin(name, plugin) {
	    objectPath.exports.set(window, `kp.element.${name}`, plugin);
	}
	class KappaPluginBase {
	    constructor() {
	        Object.defineProperty(this, "_isReady", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	        Object.defineProperty(this, "_pluginConfig", {
	            enumerable: true,
	            configurable: true,
	            writable: true,
	            value: void 0
	        });
	    }
	    get pluginConfig() {
	        return this._pluginConfig;
	    }
	    get isReady() {
	        return this._isReady;
	    }
	    get name() {
	        return "";
	    }
	    get configurable() {
	        return false;
	    }
	    setup(config) {
	        return __awaiter(this, void 0, void 0, function* () {
	            throw new Error('Method not implemented.');
	        });
	    }
	    getMethod(name) {
	        if (this[name] && typeof this[name] === "function") {
	            return this[name].bind(this);
	        }
	        return null;
	    }
	}
	Object.defineProperty(KappaPluginBase, "attributes", {
	    enumerable: true,
	    configurable: true,
	    writable: true,
	    value: []
	});
	Object.defineProperty(KappaPluginBase, "methods", {
	    enumerable: true,
	    configurable: true,
	    writable: true,
	    value: []
	});
	Object.defineProperty(KappaPluginBase, "events", {
	    enumerable: true,
	    configurable: true,
	    writable: true,
	    value: []
	});

	class KappaPluginElement extends KappaPluginBase {
	    _elementRenderer;
	    get name() {
	        return "Element";
	    }
	    async setup(config) {
	        this._pluginConfig = config.plugin;
	        if (!isAureliaElementPlugin(config.plugin)) {
	            console.error("Not a Valid Aurelia Component Plugin: ", config.plugin);
	            return;
	        }
	        const renderer = this.getRenderer();
	        this._elementRenderer = renderer;
	        this._isReady = true;
	    }
	    ;
	    getRenderer() {
	        throw Error("Not Implemented");
	    }
	    elementRenderer() {
	        return this._elementRenderer;
	    }
	    // Define Static inside Definition to make it Tree Shakable
	    static attributes = [
	        { name: "stackWidthConstraint", label: "Stack Width Constraint", schema: { type: "STRING" }, target: "element", isLayoutAttribute: true },
	        { name: "stackHeightConstraint", label: "Stack Height Constraint", schema: { type: "STRING" }, target: "element", isLayoutAttribute: true }
	    ];
	    static events = [
	        { name: "ElementShow", label: "Show", emitter: "element" },
	        { name: "ElementHide", label: "Hide", emitter: "element" },
	        { name: "ElementClick", label: "Click", emitter: "element" }
	    ];
	    static methods = [
	        {
	            name: "isVisible",
	            label: "Is Visible",
	            params: [],
	            schema: { type: "BOOLEAN" },
	            expressionTemplate: ["Is", { target: "element", type: "target" }, "Visible"]
	        },
	        {
	            name: "isHidden",
	            label: "Is Hidden",
	            params: [],
	            schema: { type: "BOOLEAN" },
	            expressionTemplate: ["Is", { target: "element", type: "target" }, "Hidden"]
	        },
	        {
	            name: "show",
	            label: "Show",
	            params: [],
	            expressionTemplate: ["Show", { target: "element", type: "target" }]
	        },
	        {
	            name: "hide",
	            label: "Hide",
	            params: [],
	            expressionTemplate: ["Hide", { target: "element", type: "target" }]
	        },
	        {
	            name: "forceShow",
	            label: "Force Show",
	            params: [],
	            expressionTemplate: ["Force Show", { target: "element", type: "target" }]
	        },
	        {
	            name: "forceHide",
	            label: "Force Hide",
	            params: [],
	            expressionTemplate: ["Force Hide", { target: "element", type: "target" }]
	        },
	        {
	            name: "clearForceVisibility",
	            label: "Clear Force Visibility",
	            params: [],
	            expressionTemplate: ["Clear Force Visibility", "of", { target: "element", type: "target" }]
	        },
	        {
	            name: "setX",
	            label: "Set X",
	            params: [{ name: "x", label: "X", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "X", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "x" }]
	        },
	        {
	            name: "setY",
	            label: "Set Y",
	            params: [{ name: "y", label: "Y", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "Y", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "y" }]
	        },
	        {
	            name: "setWidth",
	            label: "Set Width",
	            params: [{ name: "width", label: "Width", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "width", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "width" }]
	        },
	        {
	            name: "setHeight",
	            label: "Set Height",
	            params: [{ name: "height", label: "Height", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "height", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "height" }]
	        },
	        {
	            name: "setBorderRadius",
	            label: "Set Border Radius",
	            params: [{ name: "radius", label: "Radius", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "border radius", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "radius" }]
	        },
	        {
	            name: "setOpacity",
	            label: "Set Opacity",
	            params: [{ name: "opacity", label: "Opacity", schema: { type: "NUMBER" } }],
	            expressionTemplate: ["Set", "opacity", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "opacity" }]
	        },
	        {
	            name: "setBgColor",
	            label: "Set Background Color",
	            params: [{ name: "color", label: "Color", schema: { type: "COLOR" } }],
	            expressionTemplate: ["Set", "background color", "of", { target: "element", type: "target" }, "to", { type: "hole", targetParamName: "color" }]
	        }
	    ];
	}

	class KappaElementRenderer {
	    element;
	    constructor(element) {
	        this.element = element;
	    }
	    get $element() {
	        return this.element;
	    }
	    get $renderer() {
	        return this;
	    }
	    get isAttached() {
	        return this.$element.isAttached;
	    }
	    get state() {
	        return this.$element.state;
	    }
	    elementCreated() { }
	    async elementBinding() { }
	    async elementBound() { }
	    async viewAttaching() { }
	    async viewAttached() { }
	    async viewDetaching() { }
	    async viewDetached() { }
	    async onViewerMute() { }
	    async onViewerUnmute() { }
	    async onViewerPause() { }
	    async onViewerPlay() { }
	    async onViewerResize() { }
	    async onProcessData() { }
	    async onProcessPose() { }
	    async onProcessStyle() { }
	    getMethod(name) {
	        if (this[name] && typeof this[name] === "function") {
	            return this[name].bind(this);
	        }
	        return null;
	    }
	    async changeRuntimeState(callback) {
	        return await this.$element?.changeRuntimeState(callback);
	    }
	    changeRuntimeCurrentTime(currentTime) {
	        this.$element?.changeRuntimeCurrentTime(currentTime);
	    }
	    async onStateChange(state, paths, forced) { }
	    async onChildStateChange(childId, state, paths) { }
	    async onUpdateDefaultState(state) {
	        return state;
	    }
	    async onResetElement() { }
	    async onSetupAttributeObservers() { }
	    async onObservedAttributeValueChanged(request, value) { }
	}

	class KappaElementRectangle extends KappaElementRenderer {
	}
	KappaElementRectangle.$view = "";

	class KappaPluginElementRectangle extends KappaPluginElement {
	    get name() {
	        return "Rectangle Element";
	    }
	    getRenderer() {
	        return KappaElementRectangle;
	    }
	}
	KappaPluginElementRectangle.methods = [...KappaPluginElement.methods];
	KappaPluginElementRectangle.events = [...KappaPluginElement.events];

	registerElementPlugin("KappaPluginElementRectangle", KappaPluginElementRectangle);

})();
//# sourceMappingURL=plugin-element-rectangle.viewer.js.map
